//Ivan Fernandez 2E// Rellena los ...// Comenta los ejercicios cuando no los estes haciendofunction Sum(s : seq<int>) : int ensures s == [] ==> Sum(s) == 0ensures s != [] ==> Sum(s) == s[0] + Sum(s[1..]){ if s == [] then 0 else s[0] + Sum(s[1..]) }/*method problema1 (v:array<int>) returns (b : bool)requires v != nullensures b == forall k :: 0 <= k < v.Length ==> Sum(v[k..]) > 0method TestProblema1() { 	var v : array<int> := new int[6];	v[0] := 1; v[1] := 4; v[2] := 1;	v[3] := 5; v[4] := 7; v[5] := 3;	var n := problema1(v);	assert n;}*/predicate SumPositiva (s : seq<int>) ensures SumPositiva(s) == (Sum(s[..]) > 0)function CountPositivas(s:seq<int>):nat	ensures s == [] ==> CountPositivas(s) == 0	ensures s != [] && SumPositiva(s[..]) ==>        CountPositivas(s) == 1 + CountPositivas(s[1..])	ensures s != [] && !SumPositiva(s[..]) ==>        CountPositivas(s) == CountPositivas(s[1..])method problema2 (v:array<int>,n : int) returns (b : bool)requires v != nullrequires 0 <= n < v.Lengthensures b == (CountPositivas(v[..]) > n)method TestProblema2() { 	var v : array<int> := new int[6];	v[0] := -1; v[1] := -4; v[2] := -1;	v[3] :=8; v[4] := 7; v[5] := 8;	//assert Sum(v[..]) < 0;	var n := problema2(v,1);	assert n;}/*method problema3 (v:array<int>) returns (p : int)requires v != null && ...ensures ...ensures ...ensures ...method TestProblema3() { 	var v : array<int> := new int[6];	v[0] := -1; v[1] := 4; v[2] := -1;	v[3] := -5; v[4] := -7; v[5] := -3;	var n := problema3(v);	assert Sum(v[..2]) > 0;	assert n == 3;}*/